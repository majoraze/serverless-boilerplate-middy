service: 'boilerplate-api-node'

provider:
  name: aws
  runtime: nodejs8.10
  region: ${opt:region, 'us-east-1'}
  profile: ${file(config/${self:custom.stage}.yml):config.profile, 'mobly-dev'}
  memorySize: 1024
  timeout: 30
  versionFunctions: false
  tracing: true # enable tracing x-ray
  stackTags: ${file(config/${self:custom.stage}.yml):tags}
  environment:
    ${file(config/${self:custom.stage}.yml):environment}

  deploymentBucket:
    name: mobly.${self:custom.stage}.serverless.${self:provider.region}.deploys

  iamRoleStatements: # essas regras serão aplicadas para todos os lambdas
    - Effect: "Allow"
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource: "*"

package:
  individually: ${file(config/${self:custom.stage}.yml):config.packageIndividually}

plugins:
  - serverless-plugin-epsagon
  - serverless-webpack
  - serverless-pseudo-parameters
  - serverless-offline
  - serverless-add-api-key
  - serverless-aws-documentation
  - serverless-plugin-warmup
  - serverless-plugin-tracing
  - serverless-api-gateway-caching
  - serverless-plugin-split-stacks

custom:
  stage: ${env:SLS_STAGE, opt:stage, self:provider.stage, 'local'}

  apiKeys:
    - name: standardApiKey_${self:custom.stage}

  splitStacks:
    perFunction: true

  apiGatewayCaching:
    enabled: true

  warmup:
    folderName: '_warmup'
    cleanFolder: false
    name: '${self:service}-${self:custom.stage}-warmup-lambdas'
    timeout: 5
    prewarm: true

  epsagon:
    token: ${ssm:/epsagon/token}
    appName: ${self:service}

  # customDomain:
  #   domainName: ${file(../../../config/config.${self:custom.stage}.yml):DOMAIN_NAME}
  #   basePath: 'price-lists'
  #   stage: ${self:custom.stage}
  #   createRoute53Record: true

  documentation:
    api:
      info:
        version: '1'
        title: Boilerplate API
        description: Documentação do exemplo Boilerplate
      contact:
          name: Time responsável
          email: fake@email.com
    authorizers:
      -
        name: "OAuth 2.0"
        description: ""
    tags:
      -
        name: "Drivers"
        description: "Services for drivers"
      -
        name: "Itineraries"
        description: "Service for itineraries"
    models:
      # Default Models
      -
        name: "ResponseId"
        description: "This is object when response id (updates, deletes of specific object)"
        contentType: "application/json"
        schema: ${file(models/response-id.json)}
      -
        name: "ResponseError"
        description: "This is object when any error ocurred"
        contentType: "text/plain"
        schema:
          type: string
      # Driver Models
      - ${file(src/services/drivers/endpoints/_models.yml):DriverCreateReq}
      - ${file(src/services/drivers/endpoints/_models.yml):DriverUpdateReq}
      - ${file(src/services/drivers/endpoints/_models.yml):DriverFindAllRes}
      #itinerary models
      - ${file(src/services/itineraries/endpoints/_models.yml):ItineraryFindAllRes}
      #user models

  serverless-offline:
    host: 0.0.0.0
    babelOptions:
      presets: ["@babel/env"]

  webpack:
    excludeFiles: '**/*.spec.js'
    webpackConfig: webpack.config.js
    includeModules:
      packagePath: package.json
      forceExclude:
        - aws-sdk # to guarantee the sdk is excluded in the package

functions:
  - ${file(src/services/drivers/endpoints/_endpoints.yml)} # api endpoints
  - ${file(src/services/itineraries/endpoints/_endpoints.yml)} # api endpoints